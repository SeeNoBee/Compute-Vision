macro(parse_arguments FUNCTION_NAME PREFIX)
    cmake_parse_arguments("${PREFIX}" "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})

    list(LENGTH ${PREFIX}_UNPARSED_ARGUMENTS UNPARSED_COUNT)
    if(UNPARSED_COUNT GREATER 0)
        message(WARNING "Unexpected arguments in function '${FUNCTION_NAME}': ${${PREFIX}_UNPARSED_ARGUMENTS}")
    endif()
endmacro()

function(add_to_path RESULT PATH ADDITION)
    file(TO_CMAKE_PATH "${PATH}" PATH)
    file(TO_CMAKE_PATH "${ADDITION}" ADDITION)

    string(REGEX MATCH ".$" LAST_PATH_CHAR "${PATH}")
    string(REGEX MATCH "^." FIRST_ADDITION_CHAR "${ADDITION}")

    if("${FIRST_ADDITION_CHAR}" STREQUAL "/")
        string(SUBSTRING "${ADDITION}" 1 -1 ADDITION)
    endif()

    if("${LAST_PATH_CHAR}" STREQUAL "/")
        set(${RESULT} "${PATH}${ADDITION}" PARENT_SCOPE)
    else()
        set(${RESULT} "${PATH}/${ADDITION}" PARENT_SCOPE)
    endif()
endfunction(add_to_path)

function(concat_paths RESULT)
    set(multiValueArgs PATHS ADDITIONS)
    file(TO_CMAKE_PATH "${ARGN}" ARGN)

    parse_arguments("concat_path" "ARGS" ${ARGN})

    foreach(PATH ${ARGS_PATHS})
        foreach(ADDITION ${ARGS_ADDITIONS})
            add_to_path(TMP "${PATH}" "${ADDITION}")
            list(APPEND INT_RESULT "${TMP}")
        endforeach()
    endforeach()

    set(${RESULT} "${INT_RESULT}" PARENT_SCOPE)
endfunction(concat_paths)

function(parent RESULT)
    set(options DEBUG)
    set(oneValueArgs PATH LEVEL)

    file(TO_CMAKE_PATH "${ARGN}" ARGN)

    parse_arguments("parent" "ARGS" ${ARGN})

    if("${ARGS_LEVEL}" STREQUAL "")
        set(ARGS_LEVEL 1)
    elseif(${ARGS_LEVEL} EQUAL 0)
        set(${RESULT} ${ARGS_PATH} PARENT_SCOPE)
        return()
    elseif(${ARGS_LEVEL} LESS 0)
        if(ARGS_DEBUG)
            message(WARNING "LEVEL argument of 'parent' function is [${ARGS_LEVEL}] < 0")
        endif()
        set(${RESULT} "" PARENT_SCOPE)
        return()
    endif()

    set(PATH "${ARGS_PATH}")

    math(EXPR DEPTH "${ARGS_LEVEL} - 1")
    foreach(LEVEL RANGE ${DEPTH})
        set(TMP "${PATH}")
        get_filename_component(PATH "${PATH}" DIRECTORY)
        if(("${TMP}" STREQUAL "${PATH}") OR ("${PATH}" STREQUAL ""))
            if(ARGS_DEBUG)
                message(WARNING "Parent directory of '${ARGS_PATH}' level [${LEVEL}] is not exist")
            endif()
            set(PATH "")
            break()
        endif()
    endforeach()

    set(${RESULT} "${PATH}" PARENT_SCOPE)
endfunction(parent)

function(is_subpath RESULT ROOT PATH)
    add_to_path(ROOT "${ROOT}" "")
    file(TO_CMAKE_PATH "${PATH}" PATH)
    string(REGEX MATCH "^${ROOT}" ROOT "${PATH}")
    if("${ROOT}" STREQUAL "")
        set(${RESULT} FALSE PARENT_SCOPE)
    else()
        set(${RESULT} TRUE PARENT_SCOPE)
    endif()
endfunction(is_subpath)

function(paths_are_exists RESULT)
    set(oneValueArgs PATHS)
    file(TO_CMAKE_PATH "${ARGN}" ARGN)
    parse_arguments("paths_are_exists" "ARGS" ${ARGN})
    if("${ARGS_PATHS}" STREQUAL "")
        set(${RESULT} FALSE PARENT_SCOPE)
        return()
    endif()

    set(${RESULT} TRUE PARENT_SCOPE)

    foreach(PATH ${ARGS_PATHS})
        if(NOT EXISTS ${PATH})
            set(${RESULT} FALSE PARENT_SCOPE)
            return()
        endif()
    endforeach()
endfunction(paths_are_exists)

function(list_of_content RESULT)
    set(options RECURSE RELATIVE DIRECTORIES)
    set(multiValueArgs FILTERS PATHS)

    parse_arguments("list_of_content" "ARGS" ${ARGN})

    if(ARGS_RECURSE)
        set(GLOB_OPTION GLOB_RECURSE)
    else()
        set(GLOB_OPTION GLOB)
    endif()

    if(ARGS_DIRECTORIES)
        set(DIRECORIES_OPTION LIST_DIRECTORIES true)
    else()
        set(DIRECORIES_OPTION LIST_DIRECTORIES false)
    endif()

    if("${ARGS_FILTERS}" STREQUAL "")
        set(ARGS_FILTERS *)
    endif()

    foreach(PATH ${ARGS_PATHS})
        if(ARGS_RELATIVE)
            set(RELATIVE_OPTION RELATIVE ${PATH})
        endif()
        foreach(FILTER ${ARGS_FILTERS})
            add_to_path(SEARCH_FILTER "${PATH}" "${FILTER}")
            file(${GLOB_OPTION} LOCAL_RESULT ${DIRECORIES_OPTION} ${RELATIVE_OPTION} "${SEARCH_FILTER}")
            list(APPEND LIST_OF_CONTENT ${LOCAL_RESULT})
        endforeach()
    endforeach()

    set(${RESULT} ${LIST_OF_CONTENT} PARENT_SCOPE)
endfunction(list_of_content)

function(is_found RESULT PATH)
    if("${PATH}" STREQUAL "")
        set(${RESULT} FALSE PARENT_SCOPE)
        return()
    endif()

    string(REGEX MATCH "-NOTFOUND$" MATCHED "${PATH}")
    if("${MATCHED}" STREQUAL "")
        set(${RESULT} TRUE PARENT_SCOPE)
    else()
        set(${RESULT} FALSE PARENT_SCOPE)
    endif()
endfunction(is_found)

function(find RESULT)
    set(options RELATIVE DEBUG STATUS)
    set(oneValueArgs INDICATOR LEVEL DOC)
    set(multiValueArgs PATHS)

    file(TO_CMAKE_PATH "${ARGN}" ARGN)

    parse_arguments("find" "ARGS" ${ARGN})

    is_found(RESULT_FOUND "${${RESULT}}")
    if(RESULT_FOUND)
        return()
    endif()

    if(ARGS_STATUS)
        message(STATUS "Searching ${RESULT}")
    endif()

    if(ARGS_RELATIVE)
        set(RELATIVE_OPTION RELATIVE)
    endif()

    if("${ARGS_LEVEL}" STREQUAL "")
        set(ARGS_LEVEL 0)
    endif()

    if(${ARGS_LEVEL} EQUAL 0)
        set(CACHE_VAR_TYPE_OPTION FILEPATH)
    else()
        set(CACHE_VAR_TYPE_OPTION PATH)
    endif()

    if("${ARGS_DOC}" STREQUAL "")
        set(ARGS_DOC "Description for ${RESULT} is undefined")
    endif()

    set(${RESULT} ${RESULT}-NOTFOUND CACHE ${CACHE_VAR_TYPE_OPTION} ${ARGS_DOC} FORCE)

    if("${ARGS_INDICATOR}" STREQUAL "")
        if(ARGS_DEBUG)
            message(WARNING "Indicator is undefined")
        endif()
        return()
    endif()

    foreach(PATH ${ARGS_PATHS})
        list_of_content(FINDS PATHS ${PATH} ${RELATIVE_OPTION} RECURSE FILTERS ${ARGS_INDICATOR})

        list(LENGTH FINDS FINDS_COUNT)

        set(IS_UNIQUE TRUE)

        if(NOT ${FINDS_COUNT} EQUAL 1)
            if (${FINDS_COUNT} GREATER 1)
                list(SORT FINDS)
                list(GET FINDS 0 FIRST_FOUNDED)
                parent(FIRST_PATH PATH "${FIRST_FOUNDED}" DEBUG)
                list(REMOVE_AT FINDS 0)
                foreach(FOUNDED ${FINDS})
                    is_subpath(IS_ROOT "${FIRST_PATH}" "${FOUNDED}")
                    if(NOT IS_ROOT)
                        set(IS_UNIQUE FALSE)
                        break()
                    endif()
                endforeach()
                set(FINDS ${FIRST_FOUNDED})
            else()
                if(ARGS_DEBUG)
                    message(WARNING "Indicator ${ARGS_INDICATOR} is not found in [${PATH}]")
                endif()
                continue()
            endif()
        endif()

        if(IS_UNIQUE)
            parent(TARGET_DIR PATH ${FINDS} LEVEL ${ARGS_LEVEL})
            if("${TARGET_DIR}" STREQUAL "")
                if(ARGS_DEBUG)
                    message(WARNING "Parent directory of [${FINDS}] level [${ARGS_LEVEL}] not found")
                endif()
                continue()
            else()
                set(${RESULT} ${TARGET_DIR} CACHE ${CACHE_VAR_TYPE_OPTION} ${ARGS_DOC} FORCE)
                return()
            endif()
        else()
            if(ARGS_DEBUG)
                message(WARNING "Indicator ${ARGS_INDICATOR} is not unique in [${PATH}]: ${FINDS}")
            endif()
            continue()
        endif()
    endforeach()
endfunction(find)
